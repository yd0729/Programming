#!markdown

# Unity 脚本 的 C# 基础
## Hello World

#!csharp

System.Console.WriteLine("Hello. My name is Inigo Montoya.");

#!csharp

string requirements, miracleMax;
requirements = miracleMax = "It would take a miracle.";
System.Console.WriteLine(miracleMax);

#!markdown

## 类型

var

#!markdown

## 数组

是引用类型

#!csharp

int[] arr1 = new int[5];
int[] arr2 = new int[]{1, 2, 3};
int[] arr3 = {1, 2, 3, 4, 5};
int[] arr4 = arr3;

arr3[1] = 5;
System.Console.WriteLine(arr4[1]);

int[,] arr5 = new int[2, 3]{{1, 2, 3}, {1, 2, 3}};

#!markdown

## 类型转换

### 隐式转换

#!csharp

byte a = 5;
int b = a;
b

#!markdown

### 显示转换

#!csharp

byte c = (byte) a;
int d = Convert.ToInt32(c);

Console.WriteLine(c);
Console.WriteLine(d);

#!markdown

### 字符串的转换

#!csharp

int e = 123;
string s = e.ToString();
Console.WriteLine(s);
int f = int.Parse(s);
Console.WriteLine(f);

#!markdown

## 装箱与拆箱

值类型与引用类型的装换．

只有值类型才存在装箱和拆箱．

值类型在栈中，引用类型在栈中保存指向堆中数据的指针，装箱时需要将栈中的数据复制到堆中．

装箱是隐式的，拆箱是显式的，因为你需要告诉 C# 你要给拆出来的值赋予什么类型．

#!csharp

int i = 3;
object o = i;  // 装箱
int j = (int) o;  // 拆箱
Console.WriteLine(j);

#!markdown

## 分支和循环

和 C++ 一样．

#!csharp

int[] a = {1, 2, 3};

foreach (int i in a)  // foreach 是只读遍历，这个 i 不能改变
{
    Console.WriteLine(i);
}

#!markdown

### 冒泡排序

#!csharp

int[] a = {3, 2, 1};

for (int i = 0; i < a.Length - 1; i++)  // n - 1 遍
{
    for (int j = 0; j < a.Length - i - 1; j++)  // 最后 i 个已经冒泡到正确的位置了．
    {
        if (a[j] > a[j + 1])
        {
            int temp = a[j];
            a[j] = a[j + 1];
            a[j + 1] = temp;
        }
    }
}

a

#!markdown

### 选择排序

#!csharp

int[] a = {3, 2, 1};

for (int i = 0; i < a.Length - 1; i++)  // n - 1 遍
{
    int min_idx = i;
    for (int j = i + 1; j < a.Length; j++)
    {
        if (a[j] < a[min_idx]) {
            min_idx = j;
        }
    }
    int temp = a[i];
    a[i] = a[min_idx];
    a[min_idx] = temp;
}

a

#!markdown

## 函数与递归

#!csharp

static void fun(string str) 
{
    Console.WriteLine(str);
}

static void fun(int a, int b = 3) 
{
    Console.WriteLine(a);
    Console.WriteLine(b);
}

fun("Hello");
fun(1);
fun(1, 4);

static int add(int a, int b) {
    return a + b;
}

Console.WriteLine(add(1, 5));

#!csharp

static void swap(ref int a, ref int b) // 把值类型按照引用传递
{
    int temp = a;
    a = b;
    b = temp;
}

int a = 1;
int b = 2;

swap(ref a, ref b);

Console.WriteLine(a);
Console.WriteLine(b);

// swap(1, 2); 不能用字面值

#!csharp

static int Test(out string str) // out 参数在方法中一定要被赋值，否则会报错
{
    str = "Hello";
    return 1;
}

string str;
int num = Test(out str);

Console.WriteLine(str);
Console.WriteLine(num);

#!markdown

## 枚举与结构体

枚举和结构体都是值类型

#!csharp

enum Color { Red = 1, Green, Blue };

Console.WriteLine((int) Color.Red);
Console.WriteLine((int) Color.Green);

Color c = Color.Green;
Console.WriteLine((int) c);

#!csharp

object[] person = {"小王", 20, 89};  // 不好用，因为没有类型信息

struct Person
{
    public string name;
    public int age;
    public int height;
}

Person p = new Person();
p.name = "小王";
p.age = 20;
p.height = 89;

#!markdown

## 命名空间

```csharp
namespace 空间名称
{
    // 代码
}

using 空间名称;
```

#!markdown

## 类与对象

#!markdown

### 属性与构造

构造方法：

- 无返回值
- 方法名与类名相同

### 静态与抽象

- 静态成员：类的变量，不是实例的．
- 静态类：只能包含静态成员．
  
  ```csharp
  static class 类名
  {
      // ...
  }
  ```
- 抽象类：不能实例化
- 抽象方法：没有方法体，不能是 private ，如果子类不是抽象类，则必须重写

### 接口

一组包含了类或结构体可以实现的功能的定义．

- 不能包含字段
- 是引用类型
- 只包含定义，不包含实现，不能被实例化
- 默认 public ，不可以使用其他访问级别
- 类的继承只能单继承，接口的实现支持多实现
- 接口一旦被实现，就必须实现接口当中的所有成员

#### 接口与抽象类

相同点：

- 都不能被实例化
- 都包含了由其他类或结构继承或实现的抽象成员

不同点：

- 抽象类当中除了有抽象成员外还可以拥有非抽象成员，而接口中所有的成员都是抽象的
- 抽象成员可以使用修饰符修饰，接口当中接口成员访问级别默认不可修改，为 public
- 接口当中不可以包含构造方法，析构方法，静态成员，常量
- 抽象类支持单继承，接口支持多继承

#!csharp

class Person
{
    // 字段
    private string name;
    private int age;
    private int height;
    public static int population;  // 静态变量

    // 属性
    public string Name
    {
        get { return name; }  // 允许读
        set { name = (value == "" ? "无名氏" : value); }  // 允许写，value 是外界赋的值
    }

    public int Age {get;}  // 只读属性

    // 构造器
    static Person() { population = 0; }  // 静态构造器

    protected Person()
    {
        this.name = "无名氏";
        population++;
    }

    public Person(string name, int age): this()
    {
        this.name = name;
        this.age = age;
    }

    public Person(string name, int age, int height) : this(name, age)
    {
        this.height = height;
    }

    // 析构器
    ~Person()
    {
        Console.WriteLine("析构函数被调用");
    }

    // 一般方法：可以使用静态和非静态的成员和方法
    public void Chat()
    {
        Console.WriteLine($"你好，我是{name}");
    }

    // 静态方法：只能用同为静态的成员方法
    public static void writePopulation()
    {
        Console.WriteLine($"当前人口数：{population}");
    }
}

// 实例化一个对象
Person p = new Person("小张", 2, 180);
p.Chat();
Console.WriteLine(p.Name);
p.Name = "";
Console.WriteLine(p.Name);

Console.WriteLine(Person.population);
Person.writePopulation();

interface IWolf
{
    void Cry();
}

class WolfPerson: Person, IWolf
{
    public void Cry()
    {
        Console.WriteLine("啊啊啊");
    }
}

IWolf w = new WolfPerson();
w.Cry();
Person p2 = (Person) w;
p2.Chat();

#!markdown

### 继承与多态

- public：完全可访问
- private：同一 class 可访问
- protected：同一 class 或派生的子类可访问
- internal：同一程序集可访问
- protected internal：protected 并 internal
- private protected：protected 且 internal

不写的话，默认是 protected ．

```csharp
class 派生类: 基类
{
    
}
```

多态是同一个行为具有多个不同表现形式或形态的能力，在面向对象编程范式中，多态往往表现为“一个接口，多个功能”．

1. 父类变量指向子类
2. 函数重载

#!csharp

abstract class Animal
{
    public string name = "动物";

    public abstract void say();  // 抽象方法

    public void eat()  // 方法
    {
        Console.WriteLine("动物吃东西");
    }

    public virtual void say(string str)  // 虚方法
    {
        Console.WriteLine($"动物说：{str}");
    }
}

class Dog : Animal
{
    public override void say()
    {
        Console.WriteLine("汪汪");
    }

    public new void eat()
    {
        Console.WriteLine("狗吃东西");
    }
}

class Cat : Animal
{
    public override void say()
    {
        Console.WriteLine("喵喵");
    }
}

Animal a = new Dog();
Animal b = new Cat();

a.say();
b.say();

a.eat();  // 动物吃东西
((Dog) a).eat();  // 狗吃东西

a.say("你好");

#!markdown

## 泛型

使用 object 也能实现类似泛型的功能，但是：

1. 在处理值类型时：会涉及装箱和拆箱操作，性能损失可能会比较严重．
2. 在处理引用类型时：涉及强制类型转化，也有性能损失．
3. 内部实现时还是需要很多分支来区分不同的类型．

C# 中的泛型能够将类型作为参数来传递．

1. 泛型可以重用代码，保护类型的安全以及提高性能
2. 降低强制转换或装箱操作的成本和风险
3. 对泛型参数进行限定以访问特定数据类型的方法

#!csharp

public static void Swap<T>(ref T a, ref T b) where T: struct
{
    T temp = a;
    a = b;
    b = temp;
}

int a = 1;
int b = 3;
Swap(ref a, ref b);
Swap<int>(ref a, ref b);

Console.WriteLine(a);
Console.WriteLine(b);

#!markdown

约束：where

- where T: struct ， T 是值类型
- where T: class ， T 是引用类型
- where T: new() ， T 有无参构造
- where T: 基类名 ， T 是这个类或派生类
- where T: 接口名 ， T 实现了这个接口
- where T: U ， T 是 U 或派生自 U

#!csharp

void Test<T, U>(T a, U b) where T: struct where U: IComparable<T>, new() // new() 必须写在最后
{
    
}

#!markdown

## 集合与队列

集合：

- 一组具有相同性质的对象
- 可通过索引访问集合成员
- 可通过“键”访问
- 大小可以动态调整
- 可在运行时添加或删除元素

泛型集合：`System.Collenctions.Generic`

非泛型集合：`System.Collections`

`System.Collections.Specialized` 中也包含一些有用的集合类．

#!markdown

### 数组 ArrayList

- 动态增加和减少元素
- 实现了 `ICollection` 和 `IList` 和 `IEnumerable` 接口
- 灵活设置数组大小
- 不安全的集合类型：什么类型都能放
- 元素为值类型时，效率不高（装箱和拆箱耗性能）

#!csharp

using System.Collections;

ArrayList arr = new ArrayList();

arr.Add(1);
arr.Add("hhh");

arr.Insert(0, 1.1f);

foreach (var item in arr)
{
    Console.WriteLine(item);
}

arr.Remove(1.1f);
arr.RemoveAt(0);

arr.Reverse();

Console.WriteLine(arr.Count);
Console.WriteLine(arr.Contains(1));

arr.Clear();

#!markdown

### 堆栈 Stack

- 不安全的
- 可接受 null
- 泛型为 `Stack<T>`

#!csharp

Stack stack = new Stack();

stack.Push(1);
stack.Push(2);

object o = stack.Pop();
int num = (int) o;

Console.WriteLine(num);
Console.WriteLine(stack.Peek());

stack.Contains(1);

#!markdown

### 队列 Queue

- 和上边一样

#!csharp

Queue queue = new Queue();

queue.Enqueue(1);
queue.Enqueue("hhh");

var obj = queue.Dequeue();
queue.Contains(1);
queue.Peek();

#!markdown

### 哈希表 HashTable

Key 和 Value 都是 object 类型．

#!csharp

Hashtable ht = new Hashtable();

ht.Add(1, "one");
ht.Add(2, "two");
ht.Add("three", 3);

Console.WriteLine(ht[1]);
Console.WriteLine(ht["three"]);

ht.ContainsKey(1);
ht.ContainsValue("one");

ht.Remove(1);

foreach (var item in ht.Keys)
{
    Console.WriteLine(item);
}

#!markdown

## 泛型集合

- `List<T>`：背包
- `Stack<T>`
- `Queue<T>`：对象池，循环使用对象，不用创建销毁
- `Dictionary<int, string>`

#!csharp

List<int> list = new();

list.Add(1);

foreach (var item in list)
{
    Console.WriteLine(item);
}

Dictionary<int, string> dict = new();

dict.Add(1, "one");
dict.Add(2, "two");

for (int i = 0; i < 3; i += 1) {
    bool res = dict.TryGetValue(i, out string value);
    if (res) {
        Console.WriteLine(value);
    } else {
        Console.WriteLine("没有这个键");
    }
}

#!markdown

## 委托

C# 中的委托类似于 C/C++ 中的函数指针．

委托是一种可以存放方法的自定义类型．

委托链的绑定与解绑定．

#!csharp

public delegate int CalHandler(int a, int b);

static int add(int a, int b) {
    int res = a + b;
    Console.WriteLine($"{a} + {b} = {res}");
    return res;
}

static int sub(int a, int b) {
    int res = a - b;
    Console.WriteLine($"{a} - {b} = {res}");
    return res;
}

CalHandler handler = sub;
handler += sub;

handler(3, 4);

handler += add;

handler(5, 6);

handler -= sub;

handler(7, 8);

#!markdown

## 匿名委托与事件

事件：特殊的委托对象

- 在事件所在的类中，可以对事件进行赋值（=）、调用、绑定（+=）和解绑定（-=）
- 在非事件所在的类中，只能对事件进行绑定（+=）和解绑定（-=）

#!csharp

class Test {
    public delegate void MyDelegate(int a, int b);

    static public MyDelegate myDelegate = delegate(int a, int b) {
        Console.WriteLine($"{a} + {b} = {a + b}");
    };  // 匿名方法

    static public event MyDelegate MyEvent;  // 事件
}

Test.myDelegate = (int a, int b) => {
    Console.WriteLine($"{a} - {b} = {a - b}");
};  // lambda 表达式

Test.myDelegate(3, 4);

Test.MyEvent += (int a, int b) => {
    Console.WriteLine($"{a} * {b} = {a * b}");
};

// Test.MyEvent = (int a, int b) => {
//     Console.WriteLine($"{a} * {b} = {a * b}");
// };  // 报错

// Test.MyEvent(5, 6);  // 报错

#!csharp

using System.Threading;

class Player { // 播放器
    public delegate void PlayHandler(string name);

    public void Play(PlayHandler handler) {
        handler("开始播放");
        int time = new Random().Next(5, 10) * 1000;
        Thread.Sleep(time);
        handler("播放结束");
    }
}

Player player = new();

player.Play((string name) => {
    Console.WriteLine(name);
});

#!markdown

## 字符串

string 是引用类型，但很特殊．

只能读不能写．

可以 `+` 、 `+=` ，但不能 `-` 、 `-=` ．

#!csharp

string str1 = "abc";
string str2 = "abc";

Console.WriteLine(Object.ReferenceEquals(str1, str2));  // 引用同一个 object

Console.WriteLine(str1[0]);  // 可以使用下标

#!csharp

string str = "Hello Unity";

Console.WriteLine(str.Contains("Unity"));

#!csharp

string str = "Hello Unity";

Console.WriteLine(str.Remove(0, 6));

#!csharp

String str1 = "Hello";
String str2 = "Unity";

Console.WriteLine(String.Concat(str1, " ", str2));

#!csharp

string str = "Unity";

Console.WriteLine(str.Insert(0, "Hello "));

#!csharp

String str = "Hello World";

Console.WriteLine(str.Replace("World", "Unity"));

#!csharp

String str = "Hello World";

var arr = str.Split(' ');
foreach (var item in arr)
{
    Console.WriteLine(item);
}

#!csharp

string str = "Hello Unity";

Console.WriteLine(str.Substring(6, 5));

#!csharp

var sb = new StringBuilder();

sb.Append("Hello");
sb.Append(" ");
sb.Append("Unity");

Console.WriteLine(sb.ToString());
